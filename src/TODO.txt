
1. Interfejs graficzny - część 1:
- wszucić instance obiektu Settings do klasy Algorithm
- wyodrębnić wszystko z klasy Algorithm do osobnej klasy i dać instancje tej klasy do klasy Algorithm
- w głównym oknie wyświetlić drzewa z wczytanym projektem i bazą (tylko foldery z plikami .java?)
	+ na dole lub na górze drzewa wydzielić miejsce na wyświetlnie ścieżki do folderu
- w miejsce niewczytanej tabeli 1 wstawić:
    + choose directory containing all other projects 
    + choose directory containing project that will be compared with other projects
    + start program
- tabela 1 - przechowywać ścieżki do plików (dla drugiej tabeli)?


2. Interfejs graficzny - część 2:
- dwa pola tekstowe nad drugą tabelą ze ścieżkami do plików (nie użyć splitPane)
- tabela 2:
	+ scrollbar
	+ nagłówki w pierwszym wierszu tabeli - nazwy plików
	+ wiersze zawierające przedziały numerów linii z podobnym kodem
	+ podświetlane kliknietego wiersza
	+ gdy nie jest wypełnione wyświetlić wiadomość: "select pair of files from list"
	+ po kliknięciu na wiersz pierwszej tabeli wyświetlić tą tabelę
- dwa pola pokazujące kod pary plików:
	+ okna pionowe
	+ scrollbar
	+ nagłówki - ramka z nazwą pliku i numerami podobnych linii
	+ wyświetlenie całego pliku
	+ automatyczne scrollowanie do miejsca z podobnym kodem
	+ wyróżnienie podobnego kodu
	+ po kliknięciu na wiersz drugiej tabeli wyświetlić te okna
	+ po kliknięciu na wiersz pierwszej tabeli schować te okna


3. Tokenizacja i sposób porównywania:
- spis tokenów i odpowiadających im typów
- sprawdzić wszystkie możliwe typy w javie np. interfejs
- ustalić znak końca linii - enter (zależny od systemu) lub średnik (pomijać tekst w cudzysłowiu i \")
- usunięcie z kodu komentarzy, znaków białych (użyć biblioteki?)
- plik z opcjami:
	+ wybór minimalnej długości łańcuchów
	+ wybór procentu podobieństwa łańcuchów
	+ wyświetlanie tylko par plików z minimalnym procentem podobieństwa
- algorytm porównujący:
	+ zasada działania:
		- z pary plików otrzymujemy dwa gigantyczne ciągi tokenów
		- szukamy takich samych fragmentów tokenów pomiędzy obydwoma ciągami, np. algorytm Karp-Rabin
	+ bierze pod uwagę minimalną długość fragmentu
	+ raz znalezione identyczne tokeny, nie mogą być użyte do dalszych porównań
	+ bierze pod uwagę procentowe podobieństwo fragmentów
		- niepodobny kod na początku i końcu fragmentu jest pomijany
	+ zwraca numery linii fragmentów z podobnym kodem
	+ sprawdzić czy podobne strumienie tokenów mają podobnie wyglądające linie (spradzić numery linii kodu)
- help - opis wszystkiego m.in. kolumn tabel


X. Dodatkowe pomysły:
- wyświetlenie paska postępu i przeminiętego czasu
- szybkie porównanie:
	+ sprawdza tylko procentowe podobieństwo (suma różnic takich samych linii w obu plikach przez sume linii)
	+ nie bierze pod uwagę minimalnej długości fragmentu kodu
- statystyki:
	+ czas wykonania programu
	+ liczba identycznych tokenów
	+ inne
- nazwy/szablony plików lub ścieżki podane przez użytkownika, które nie będą sprawdzane

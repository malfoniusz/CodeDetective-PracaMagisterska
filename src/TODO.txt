
- usunac mozliwosc wyboru minimalnej liczby tokenow + usunać ustawienia + usunac wzmiankę o tym w dokumentacji + implementacje tego w TokenFile i TokenLine
- w CompareFiles wyświetlić długość najdłuższego znalezione fragmentu
- przetestować program na dużej liczbie podobnych projektów (spytać prowadzącego, poszukać na internecie, poszukać w innych pracach o podobnej tematyce)
- jeśli po uruchomieniu program nic nie znajdzie to wyświetlić komunikat


5. Testy
- napisać testy:
    + normalizacji kodu
    + tokenizacji:
        - scalic kilka plikow z roznych zrodel w jedne plik z kilkoma tysiacami linii kodu
        - umiescic ten plik w projekcie
        - przygotowac test tokenizacji
        - wykorzystać token UNKNOWN
    + wykrywania plagiatu


6. Rodzaje tokenizacji:
- co zrobić z nieztokenizowanymi słowami? pominąć je, czy użyć token UNKONOW gdy linijka nie ma żadnego tokena?
- wybor tokenów jakie mają być używane - UWAGA przy wyłączaniu tokenów wpływających na wykrywanie funkcji i operatorów np. arytmentycznych
- rodzaje:
    + ogólna np. LICZBA = float, double, int, long, short
    + prezycyjna np. INT = int; class(int a, float b) - rozróżniać argumenty i kolejność argumentów jest ustalana na podstawie kolejności sprawdzania typów argumentów
    + "branie/nie branie" pod uwagę początek { i koniec } np. BEGIN_CLASS, END_CLASS; sprawdzić przykład z JPlag
    + "branie/nie branie" pod uwagę argumentow w np. if(), for(), while()
    + "branie/nie branie" pod uwage argumentow w definicjach u wywolaniach funkcji 


7. Rozbudowa:
- help - opis wszystkiego m.in. co oznaczają poszczególne kolumny tabel
- zrobić metodę 1 do 1
- CompareFiles - wyświetlić długość najdłuższego znalezionego podobnego fragmentu
- branie pod uwagę procentowego podobieństwa fragmentów (niepodobny kod na początku i końcu fragmentu jest pomijany) + zaimplementować ustawienia
- wyświetlanie tylko par plików z minimalnym procentem podobieństwa
- zmodyfikowac algorytm karpa-rabina
